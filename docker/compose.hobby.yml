services:
  backend-highlight:
    container_name: backend-highlightio
    image: ${BACKEND_IMAGE_NAME:-ghcr.io/highlight/highlight-backend:latest}
    restart: on-failure
    ports:
      - "8082:8082"
    volumes:
      - highlight-data:/highlight-data
    env_file: .env
    depends_on:
      - infra-init

  frontend-highlight:
    container_name: frontend-highlightio
    image: ${FRONTEND_IMAGE_NAME:-ghcr.io/highlight/highlight-frontend:latest}
    restart: on-failure
    ports:
      - "3001:3000"  
      - "6006:6006"
      - "8080:8080"
    env_file: .env
    depends_on:
      - infra-init

  infra-init:
    image: alpine:latest
    container_name: infra-init
    volumes:
      - .:/app
    working_dir: /app
    entrypoint: ["/bin/sh", "-c"]
    command: |
      echo "Loading environment variables..."
      source env.sh

      SERVICES="clickhouse kafka postgres redis zookeeper collector predictions"
      BUILD_ARGS="--build-arg OTEL_COLLECTOR_ALPINE_IMAGE_NAME=${OTEL_COLLECTOR_ALPINE_IMAGE_NAME} \
                  --build-arg OTEL_COLLECTOR_IMAGE_NAME=${OTEL_COLLECTOR_IMAGE_NAME}"

      echo "Pulling latest images..."
      docker compose pull $SERVICES

      echo "Building services..."
      docker compose build --pull $BUILD_ARGS $SERVICES

      echo "Starting infrastructure services..."
      docker compose up --detach --wait --remove-orphans $SERVICES

      if [[ "$*" != *"--go-docker"* ]]; then
        pushd ../backend
        echo "Migrating Postgres schema..."
        go run ./migrations/main.go > /tmp/highlightSetup.log 2>&1

        if grep -e 'OPENSEARCH_ERROR' /tmp/highlightSetup.log; then
          echo 'Failed to migrate highlight infrastructure.'
          grep -e 'OPENSEARCH_ERROR' /tmp/highlightSetup.log
          echo 'Full output:'
          cat /tmp/highlightSetup.log
          exit 1
        fi
        popd
      fi

      echo "Highlight infrastructure started!"
    env_file: .env
    stdin_open: true
    tty: true
    depends_on:
      - clickhouse
      - kafka
      - postgres
      - redis
      - zookeeper
      - collector
      - predictions

  collector:
    image: ${OTEL_COLLECTOR_IMAGE_NAME:-otel-collector}
    restart: unless-stopped

volumes:
  highlight-data:
